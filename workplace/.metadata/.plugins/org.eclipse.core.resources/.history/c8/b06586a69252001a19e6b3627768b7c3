/*
 * spi.c
 *
 *  Created on: 17 f√©vr. 2020
 *      Author: Julien
 */


/**************************************
 *			INCLUDES
 *************************************/
#include <stdint.h>
#include <stdbool.h>
#include "spi.h"
#include "LPC176x.h"

/**************************************
 *		PRIVATE DEFENITION
 *************************************/
#define BSY ((SSP1SR & 0x10)>> 4)
/**************************************
 *		PRIVATE DECLARATION
 *************************************/
static uint8_t spi_rw(uint8_t dataByte);
/**************************************
 *		PRIVATE STRUCTURE
 *************************************/


/**************************************
 *		PUBLIC	FUNCTIONS
 *************************************/
	bool spi_init(void){

		__set_PCONP(PCSSP1,1);
		__set_PCLKSEL(PCLK_SSP1, PCLKDIV_4);

		__set_PINSEL(0,6,2); //SSEL
		__set_PINSEL(0,7,2); //SCK1
		__set_PINSEL(0,8,2); //MISO
		__set_PINSEL(0,9,2); //MOSI

		__set_PINMODE(0,6,2);
		__set_PINMODE(0,7,2);
		__set_PINMODE(0,8,2);
		__set_PINMODE(0,9,2);

		__set_PINOD(0,6,0);
		__set_PINOD(0,7,0);
		__set_PINOD(0,8,0);

		SSP1CPSR = 60;
		SSP1CR0 = 0x0107;
		SSP1CR1 = 2;

		return true;
	}

	uint8_t spi_8bitTransfert(uint8_t data){
		data = spi_rw(data);
		return data;
	}

	uint16_t spi_16bitTransfert(uint16_t data){
		uint16_t output = 0;
		output = spi_rw((data >> 4)&0xFF);

		output = ((output << 4) | spi_rw(data&0xFF));


		return output;
	}

	uint32_t spi_32bitTransfert(uint32_t data){

		return data;
	}


/**************************************
 *		PRIVATE FUNCTIONS
 *************************************/
static uint8_t spi_rw(uint8_t dataByte){
    uint8_t dataToReturn = 0;
	SSP1DR = dataByte;
	while(BSY){}
	dataToReturn = SSP1DR;

	return dataToReturn;
}
